5 -> 11 -> 11 -> 23 -> 23 -> 23 -> 25 -> 25 -> 26 -> 27 -> 27 -> 27 -> 27 -> NULL
**************************************************************************************
void removeDuplicates(){
        /*Another reference to head*/
        Node curr = head;

        /* Traverse list till the last node */
        while (curr != null) {
            Node temp = curr;
            /*Compare current node with the next node and
            keep on deleting them until it matches the
            current node data */
            while (temp != null && temp.data == curr.data) {
                temp = temp.next;
            }
            /*Set current node next to the next different
            element denoted by temp*/
            curr.next = temp;
            curr = curr.next;
        }
    }


Dry Run
**************************************************************************************************
 Node curr = head => curr -> Node(5)
 
 while(curr != null)
 -------------------------------------------------------------------------------------------------
 	Node(5) != null
 	--------------------------------------------------------------------------------------------
 		Node temp = curr => temp -> Node(5)
 		
 		while(temp != null && temp.data == curr.data)
 		------------------------------------------------------------------------------------------
 			Node(5) != null && 5 == 5 : true
 			------------------------------------------------------------------------------------
 				temp = temp.next => temp -> Node(11)
 				
 			Node(11)! = null && 11 == 5 : false
 			
 			loop terminates
 			
 		curr.next = temp; => no change
 		curr = curr.next => curr -> Node(11)
 		