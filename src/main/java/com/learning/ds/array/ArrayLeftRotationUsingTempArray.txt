int[] arr = {1, 2, 3, 4, 5, 6};
int d = 2;

int[] expectedArray = {3, 4, 5, 6, 1, 2};


int n = arr.length => n = 6;

int[] tempArray = new int[n] => { , , , , , };

int j = 0;
for(int i = 0 + d ; i < n ; i++){
	tempArray[j++] = arr[i];
	
}

int k = 0;

for( ; j < n; j++){
	tempArray[j] = arr[k++]
}

Dry Run
--------------------------------------------------------------------------
	i = 2 ; i < 6 (true)
	----------------------------------------------------------------------
		tempArray[0++] = arr[2]; => tempArray = { 3, , , , , } and j = 1
		
	i = 3 ; i < 6 (true)
	----------------------------------------------------------------------
		tempArray[1++] = arr[3]; => tempArray = { 3, 4, , , , } and j = 2
		
	i = 4 ; i < 6 (true)
	----------------------------------------------------------------------
		tempArray[2++] = arr[4]; => tempArray = { 3, 4, 5, , , } and j = 3
		
	i = 5 ; i < 6 (true)
	----------------------------------------------------------------------
		tempArray[3++] = arr[5]; => tempArray = { 3, 4, 5, 6, , } and j = 4
		
	loop terminates
	
	k = 0
	
	second loop => j < n => 4 < 6 (true)
	--------------------------------------------------------------------------
		tempArray[4] = arr[0++] => { 3, 4, 5, 6, 1, } and k = 1
		
	j < n => 5 < 6 (true)
	--------------------------------------------------------------------------
		tempArray[5] = arr[1++] => { 3, 4, 5, 6, 1, 2} and k = 2
	
	
	